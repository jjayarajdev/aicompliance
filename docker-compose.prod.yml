version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: ai-gateway-postgres-prod
    environment:
      POSTGRES_DB: ai_gateway
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ai-gateway-network-prod
    secrets:
      - postgres_user
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $(cat /run/secrets/postgres_user) -d ai_gateway"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: ai-gateway-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - ai-gateway-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Go Backend (Production)
  gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-gateway-backend-prod
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - GATEWAY_ENVIRONMENT=production
      - GATEWAY_LOG_LEVEL=info
      - GATEWAY_DATABASE_HOST=postgres
      - GATEWAY_DATABASE_USERNAME_FILE=/run/secrets/postgres_user
      - GATEWAY_DATABASE_PASSWORD_FILE=/run/secrets/postgres_password
      - GATEWAY_DATABASE_DATABASE=ai_gateway
      - GATEWAY_REDIS_HOST=redis
      - GATEWAY_SECURITY_JWT_SECRET_FILE=/run/secrets/jwt_secret
    secrets:
      - postgres_user
      - postgres_password
      - jwt_secret
      - openai_api_key
      - anthropic_api_key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-gateway-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Next.js Frontend (Production)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: runner
    container_name: ai-gateway-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://gateway:8080/api/v1
      - PORT=3000
      - HOSTNAME=0.0.0.0
    depends_on:
      - gateway
    networks:
      - ai-gateway-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Nginx Load Balancer (Production)
  nginx:
    image: nginx:alpine
    container_name: ai-gateway-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - gateway
      - web
    networks:
      - ai-gateway-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Production Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-gateway-prometheus-prod
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - ai-gateway-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana (Production Monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-gateway-grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    secrets:
      - grafana_admin_password
    depends_on:
      - prometheus
    networks:
      - ai-gateway-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# Production Secrets
secrets:
  postgres_user:
    file: ./secrets/postgres_user.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  anthropic_api_key:
    file: ./secrets/anthropic_api_key.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt

# Production Volumes
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local

# Production Network
networks:
  ai-gateway-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 